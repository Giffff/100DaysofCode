Hi Guys I am gonna do today a DSA Marathon. I'm going to learn from geeks for geeks, but I'm sure I'm going to implement them on my own.
[Note : I've covered only 3, the rest will be continued ....]
So I done a basic refresh in Array Data structure, let do a sorting algorithms btw to make great optimization while doing practice,

So First Let me try the implementation of different sorting algorithms,

 I found large types of sorting in geeks for geeks.
 Lets do this first, 
 
1)Selection Sort
2)Bubble Sort
3)Recursive Bubble Sort
4)Insertion Sort
5)Recursive Insertion Sort
6)Merge Sort
7)Iterative Merge Sort
8)Quick Sort
9)Iterative Quick Sort
10)Heap Sort
11)Counting Sort
12)Radix Sort
13)Bucket Sort

Selection Sort : 
                    For my better understanding, Selection sort finds the min or max of the list and swap it to the first element.
					It repeats the process and finally the array is sorted. 
					But you can see if the first min or max element is found then you can leave the current index and start comparing the following index.
					Doing this repatedly the steps will be reduced.
					 
					Selection Sort
			1. Comparison Based Algo
			2. In Place ,so Space Complexity= O(1)
			3. Time complexity O(n^2)
			4. Offline Algo
			5. Unstable Algo
			6. Non-Recursive
					
	//This is the stable version of Selection sort :-)
	
	#include<iostream>
	using namespace std;
	class Sort{
	public:
			void selection_Sort(int arr[],int n)
			{
			   for(int i=0;i<n-1;i++)
			   {
			        int temp = arr[i],index = 0;
					for(int j=i+1;j<n;j++)
					{
						if(arr[j]<temp)
                        {
						index = j;
                        temp = arr[j];
                        }
					
					}
					   if(index>i)
					swap(arr[i],arr[index]);
                    
			   }
               
            }
	};
	int main()
	{
		Sort s;
	   int arr[] = {900,1000,3000,20000,5800,2500,9800,4560,5600,9088,90898,40567,8056,2009};
       int n = sizeof(arr)/sizeof(arr[0]);
	   s.selection_Sort(arr,n);
       for(int num:arr)
       cout<<num<<" ";
    }

	   
Bubble Sort : Bubble sorting is a an easist algorithm , as that we can change the adjacent number and execute in some order.
Time Complexity : O(n^2)
#include<iostream>
using namespace std;
class Sort{
    
    public:
    void bubbleSort(int arr[],int n)
    {
        int i, j;
         bool swapped;
        for (i = 0; i < n-1; i++)
        {
             swapped = false;
            for (j = 0; j < n-i-1; j++)
            {
                if (arr[j] > arr[j+1])
                 {
                     swap(arr[j], arr[j+1]);
                    swapped = true;
                }
            }
     if (swapped == false)
        break;
        }
   }
};
    
    int main()
    {
    Sort s;
    	int arr[] = {0,200,0,400,900,534,-100,300,10000};
        int n = sizeof(arr)/sizeof(arr[0]);
	    s.bubbleSort(arr,n);
       for(int num:arr)
       cout<<num<<" ";

    }
	
Recursive Bubble Sort : There is no advantage of using recursion over normal Bubble sort. But let we try the implementation.

#include <bits/stdc++.h>
using namespace std;
class Sort{
    public : 
    void recursiveBubbleSort(int arr[], int n)
{
    if (n == 1)
        return;
 
    for (int i=0; i<n-1; i++)
        if (arr[i] > arr[i+1])
            swap(arr[i], arr[i+1]);
    recursiveBubbleSort(arr, n-1);
}

};


int main()
{
    Sort s;
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    s.recursiveBubbleSort(arr, n);
    for(int i:arr)
    cout<<i<<" ";

}

	   
	   
