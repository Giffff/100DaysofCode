# Triplets

similar to the Pair sum ,
Need to find triple number sum which equals to the value given as targeted sum. sort the triplets and the numbers in triplets in ascending order.

As Pair sum problem we used unordered set bcoz, sorting is not mandatory there. But here we need to sort this out,So we can use two pinter approach here as we sort the array.

#include<bits/stdc++.h>
using namespace std;

vector<int>triplets(vector<int>arr,int sum)
{
sort(arr.begin(),arr.end());
vector<int> v ;
for(int i=0;i<arr.size();i++)
{
 int x = sum - arr[i];
 int n = arr.size();
 int a,b;
 for(int j=i+1;j<arr.size();j++)
 {
   if(n-1==j)
   break;
   a = arr[j];
   b = arr[n-1];
   if(a+b==x)
   {
     v.push_back(arr[i]);
     v.push_back(a);
     v.push_back(b);
   }
   if(a+b>x)
   {
   n--;
   j--;
   }
   }
   
 }
 if(v.size()!=0)
 return v;
 else
 return {};
}
        
   
   

int main()
{
 vector <int> arr = {15,7,5,2,3,1,4,6,8,9};
 int sum = 18;
 auto p = triplets(arr,sum);
 for(int i=0;i<p.size();i++)
 {
  cout<<p[i];
  if((i+1)%3==0)
  cout<<"\n";
  else
  cout<<",";
  }
 
}
        
   
   

int main()
{
 vector <int> arr = {10,49,65,98,455,876,299,2099,249,5995,5,20,3,40,240,30,50,70,80,90,100,150,108};
 int sum = 400;
 auto p = triplets(arr,sum);
 for(int i=0;i<p.size();i++)
 {
  cout<<p[i];
  if(i%3==0)
  cout<<"\n";
  else
  cout<<",";
  }
 
}
